Version=5.5
NumberOfModules=0
Build1=Default,de.amberhome.viewpagerexample
ManifestCode=
IconFile=
NumberOfFiles=1
File1=settings.bal
NumberOfLibraries=2
Library1=ahviewpager
Library2=core
@EndOfDesignText@
#Region Module Attributes
	#FullScreen: False
	#IncludeTitle: False
	#ApplicationLabel: ViewPager
	#VersionCode: 1
	#VersionName: 1.0
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

' AHViewPager example
'
' Using an AHViewPager is quite simple. We need a AHPageContainer
' which holds the pages for our AHViewPager object. We pass this
' container to an AHViewPager object which is then added to the
' activity. All the magic with sliding is done in the AHViewPager
 ' object itself.
'
' Optionally you can add an AHViewPagerTabs object which acts like
' a tab selector and page indicator. 
'
Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.

	Dim TYPE_HELLO_WORLD As Int : TYPE_HELLO_WORLD = 1
	Dim TYPE_SETTINGS As Int : TYPE_SETTINGS = 2
	Dim TYPE_LISTVIEW As Int : TYPE_LISTVIEW = 3

	Dim FILL_PARENT As Int : FILL_PARENT = -1
	Dim WRAP_CONTENT As Int : WRAP_CONTENT = -2

	'We put this information to the panel tag of the panel for the pages
	Type PanelInfo (PanelType As Int, LayoutLoaded As Boolean) 

	Dim CurrentTheme As Int : CurrentTheme = 0
	Dim CurrentPage As Int : CurrentPage = 0
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	
	'The container and the ViewPager objects
	Dim container As AHPageContainer
	Dim pager As AHViewPager
	'Optionally you can use an AHViewPagerTabs object as a page indicator
	Dim tabs As AHViewPagerTabs
	
	'This panel is just for a colored line between the tabs and the pages.
	Dim line As Panel

	'Button for direct page access
	Dim Button1 As Button
	
	Dim spTheme As Spinner
End Sub

Sub Activity_Create(FirstTime As Boolean)

	'Add a Button at the bottom of the page for jumping directly to a page.
	Button1.Initialize("Button1")
	Button1.Gravity = Gravity.CENTER
	Activity.AddView(Button1, 88dip, Activity.Height - 44dip, Activity.Width - 88dip - 88dip, 40dip)	
	
	'Initialize the panels we use for the pages and put them in the container
	container.Initialize
	For i = 0 To 5
		Dim pan As Panel
		
		Select i
			Case 0
				pan = CreatePanel(TYPE_HELLO_WORLD, "Hello World")
				container.AddPage(pan,"Page " & i)
			Case 1
				pan = CreatePanel(TYPE_SETTINGS, "Settings")
				container.AddPage(pan,"Settings")
			Case Else
				pan = CreatePanel(TYPE_LISTVIEW, "ListView " & (i - 1))
				container.AddPage(pan,"ListView " & i)
		End Select
	Next
	
	'Now we have a container with our panels just add it to the pager object
	pager.Initialize(container, "Pager")
	
	'As we want to show the tabs page indicator, we initialize it
	tabs.Initialize(pager)
	tabs.LineHeight = 5dip
	tabs.UpperCaseTitle = True
	Activity.AddView(tabs, 0, 0, FILL_PARENT, WRAP_CONTENT)
	
	'We add a line below the tab page indicator because it looks good
	Dim col As ColorDrawable
	col.Initialize(tabs.LineColorCenter, 0)
	line.Initialize("")
	line.Background=col
	Activity.AddView(line, 0, 35dip, Activity.Width, 2dip)
	
	'Now we can add the pager to the activity
	Activity.AddView(pager, 0, 35dip + 2dip, Activity.Width, Activity.Height-48dip-35dip-2dip)
	SetButtonText
	SetTheme(CurrentTheme)
	
	'Add some menus for adding and removing pages
	Activity.AddMenuItem("Add new Page", "NewPage")
	Activity.AddMenuItem("Delete current Page", "DeletePage")
End Sub

Sub Activity_Resume
	'Do not call this in Activity_Create since the initialization is not complete then!
	pager.GotoPage(CurrentPage, False)
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

'This creates a page of the given type
Sub CreatePanel(PanelType As Int, Title As String) As Panel
	Dim pan As Panel
	Dim pi As PanelInfo
	
	pi.Initialize
	pi.LayoutLoaded = False
	pi.PanelType = PanelType

	pan.Initialize("")
	Select PanelType
		Case TYPE_HELLO_WORLD
			Dim lab As Label

			pan.Color = Colors.RGB(Rnd(0, 150), Rnd(0,150), Rnd(0,150))
			lab.Initialize("")
			lab.Text = Title
			lab.TextSize = 16
			lab.Gravity = Gravity.CENTER
			pan.AddView(lab, 0, 0, FILL_PARENT, FILL_PARENT)
		Case TYPE_LISTVIEW
			Dim lv As ListView
			
			lv.Initialize("LV")
			
			For i = 0 To 30
				lv.AddSingleLine("List Entry " & i)
			Next
			
			pan.AddView(lv, 0, 0, FILL_PARENT, FILL_PARENT)
	End Select 
	
	pan.Tag = pi
	Return pan
End Sub

Sub NewPage_Click
	Dim names As List
	Dim ret As Int
	
	names.Initialize
	names.Add("Hello world")
	names.Add("Settings")
	names.Add("Listview")
	
	ret = InputList(names, "Choose page type", -1)
	
	If ret = DialogResponse.CANCEL Then
		ToastMessageShow("Aborted", False)
	Else
		'Add a new page to the container just behind the current page
		container.AddPageAt(CreatePanel(ret + 1, names.Get(ret)), names.Get(ret), pager.CurrentPage + 1)
		'Inform the AHViewPagerTabs object that the data has changed.
		tabs.NotifyDataChange
		'Slide to the new page
		pager.GotoPage(pager.CurrentPage + 1, True)
	End If
End Sub

Sub DeletePage_Click
	'Delete the current page
	container.DeletePage(pager.CurrentPage)
	'Inform the AHViewPagerTabs object that the data has changed.
	tabs.NotifyDataChange
End Sub

'This event gets called when the page has changed. Be aware that it is possible that scrolling is not
'finished at this moment
Sub Pager_PageChanged (Position As Int)
	Log ("Page Changed to " & Position)
	CurrentPage = Position
	SetButtonText
End Sub

'This event gets called when the ViewPager instantiates the page. In this sub you can update the content
'of the page or even load a layout.
'Have a look in the logs to see when Pager_PageCreated and Pager_PageDestroyed are called.
Sub Pager_PageCreated (Position As Int, Page As Object)
	Log ("Page created " & Position)
	
	Dim pan As Panel
	Dim pi As PanelInfo
	
	pan = Page
	pi = pan.Tag
	
	Select pi.PanelType
		Case TYPE_SETTINGS
			If Not(pi.LayoutLoaded) Then
				pan.LoadLayout("settings")
				pi.LayoutLoaded = True
				spTheme.Add("Dark")
				spTheme.Add("Light")
				spTheme.SelectedIndex = CurrentTheme
			End If
	End Select		
End Sub

'This event gets called when the ViewPager destroys the page. Here you can free large bitmaps etc to save memory.
Sub Pager_PageDestroyed (Position As Int, Page As Object)
	Log("Page destroyed " & Position)
End Sub

Sub SetButtonText
	Button1.Text = "Page " & pager.CurrentPage
End Sub

'When the button is pressed let the user select a new page
Sub Button1_Click
	Dim pl As List
	Dim ret As Int
	pl.Initialize
	
	'Add all page titles to a list
	For i = 0 To container.Count - 1
		pl.Add(container.GetTitle(i))	
	Next
	
	'Request new page from user
	ret = InputList(pl, "Choose page", pager.CurrentPage)
	
	If ret = DialogResponse.CANCEL Then
		ToastMessageShow("Aborted", False)
	Else
		'Scroll to the new page
		pager.GotoPage(ret, True)
	End If
End Sub

Sub SetTheme(Theme As Int)
	Select Theme
		Case 0
			tabs.Color = Colors.Black
			tabs.BackgroundColorPressed = Colors.Blue
			tabs.LineColorCenter = Colors.Green
			tabs.TextColor = Colors.LightGray
			tabs.TextColorCenter = Colors.Green
			line.Color = Colors.Green
		Case 1
			tabs.Color = Colors.White
			tabs.BackgroundColorPressed = Colors.Blue
			tabs.LineColorCenter = Colors.DarkGray
			tabs.TextColor = Colors.LightGray
			tabs.TextColorCenter = Colors.DarkGray
			line.Color = Colors.DarkGray
	End Select
End Sub

Sub spTheme_ItemClick (Position As Int, Value As Object)
	CurrentTheme = Position
	SetTheme(CurrentTheme)
End Sub